generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique
  password    String
  name        String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  companyId   String?    @db.Uuid
  company     Company?   @relation(fields: [companyId], references: [id])

  products    Product[]   // relaci√≥n 1:N con productos
  movements   Movement[]  // relaci√≥n 1:N con movimientos
  purchases   Purchase[]  // relaci√≥n 1:N con compras
  sales       Sale[]      // relaci√≥n 1:N con ventas ‚Üê A√ëADIDO
}

model Product {
  id                  String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String       @db.Uuid
  user                User         @relation(fields: [userId], references: [id])
  name                String
  type                String       // producto o servicio
  barcode             String?
  category            String?
  sku                 String?
  sellAtPOS           Boolean      @default(false)
  includeInCatalog    Boolean      @default(false)
  requirePrescription Boolean      @default(false)
  saleUnit            String?
  brand               String?
  description         String?
  useStock            Boolean      @default(true)
  quantity            Float?
  price               Float?
  cost                Float?
  stock               Float?
  image               String?
  location            String?
  minimumQuantity     Float?
  satKey              String?
  iva                 Float?
  ieps                Float?
  satUnitKey          String?      // Considera agregar tambi√©n la unidad de medida
  ivaIncluded         Boolean      @default(true) // Si el precio incluye IVA
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  variants            Variant[]
  priceLists          PriceList[]
  movements           Movement[]
  purchaseItems       PurchaseItem[]
  saleItems           SaleItem[]   // ‚Üê A√ëADIDO
}

model Variant {
  id         String   @id @default(cuid())
  productId  String   @db.Uuid
  product    Product  @relation(fields: [productId], references: [id])
  type       String   // tama√±o, color, material, estilo
  value      String   // ejemplo: "rojo", "XL"
}

model PriceList {
  id         String   @id @default(cuid())
  productId  String   @db.Uuid
  product    Product  @relation(fields: [productId], references: [id])
  name       String   // ejemplo: "Mayoreo", "Retail"
  price      Float
}

model Movement {
  id            String   @id @default(cuid())
  productId     String   @db.Uuid
  product       Product  @relation(fields: [productId], references: [id])
  userId        String   @db.Uuid
  user          User     @relation(fields: [userId], references: [id])
  date          DateTime @default(now())
  type          String   // "entrada" o "salida"
  quantity      Float
  previousStock Float
  newStock      Float
  location      String?
  note          String?
}

model Supplier {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  contactName       String?
  phone             String?
  email             String?
  street            String?
  neighborhood      String?
  postalCode        String?
  city              String?
  state             String?
  municipality      String?
  rfc               String?
  totalPurchases    Float    @default(0)
  lastPurchase      DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  purchases         Purchase[]
}

model Purchase {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  supplierId        String   @db.Uuid
  supplier          Supplier @relation(fields: [supplierId], references: [id])
  userId            String   @db.Uuid
  user              User     @relation(fields: [userId], references: [id])
  date              DateTime @default(now())
  totalAmount       Float
  status            String   @default("pending") // pending, completed, cancelled
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  purchaseItems     PurchaseItem[]
}

model PurchaseItem {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  purchaseId        String   @db.Uuid
  purchase          Purchase @relation(fields: [purchaseId], references: [id])
  productId         String   @db.Uuid
  product           Product  @relation(fields: [productId], references: [id])
  quantity          Float
  unitPrice         Float
  totalPrice        Float
  createdAt         DateTime @default(now())
}

model Customer {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  razonSocial String?   // Nombre fiscal
  email       String?  @unique
  phone       String?
  address     String?
  rfc         String?
  usoCFDI     String?   // Obligatorio en CFDI 4.0
  taxRegime       String?   // R√©gimen fiscal (obligatorio)
  fiscalAddress   String?   // Domicilio fiscal completo
  fiscalStreet          String?
  fiscalExteriorNumber  String?
  fiscalInteriorNumber  String?
  fiscalNeighborhood    String?
  fiscalPostalCode      String?
  fiscalCity            String?
  fiscalState           String?
  fiscalMunicipality    String?
  fiscalCountry         String?   @default("M√©xico")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  sales       Sale[]   // relaci√≥n 1:N con ventas
  invoices    Invoice[]
}

model Sale {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerId  String     @db.Uuid
  customer    Customer   @relation(fields: [customerId], references: [id])
  userId      String     @db.Uuid
  user        User       @relation(fields: [userId], references: [id])
  date        DateTime   @default(now())
  totalAmount Float
  status      String     @default("completed") // completed, cancelled, refunded
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  saleItems   SaleItem[]
  invoices    Invoice[]   // üëà Relaci√≥n 1:N
}

model SaleItem {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  saleId     String        @db.Uuid
  sale       Sale          @relation(fields: [saleId], references: [id])

  productId  String        @db.Uuid
  product    Product       @relation(fields: [productId], references: [id])

  quantity   Float
  unitPrice  Float
  totalPrice Float
  satProductKey   String?   // Clave producto/servicio SAT
  satUnitKey      String?   // Clave unidad de medida SAT
  description     String?   // Descripci√≥n para factura

  invoiceItems InvoiceItem[]  // üëà Relaci√≥n inversa
}


model Company {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String   // Raz√≥n social
  rfc            String   @unique
  regime         String   // R√©gimen fiscal (SAT)
  // Certificado Digital
  csdCert        String?  // Certificado CSD (archivo .cer en base64 o ruta)
  csdKey         String?  // Llave privada (.key)
  csdPassword    String?  // Contrase√±a de la llave
  // Domicilio Fiscal
  street         String   // no String?
  exteriorNumber String   // no String?
  interiorNumber String?   // <--- agregar opcional
  neighborhood   String   // no String?
  postalCode     String   // no String?
  city           String   // no String?
  state          String   // no String?
  municipality   String   // no String?
  country        String?   @default("M√©xico")
  // Contacto
  email          String?   // Correo para notificaciones
  phone          String?   // Tel√©fono
  // Configuraci√≥n PAC (nuevos campos)
  pac            String?   // Nombre del PAC (SW, Facturama, etc.)
  pacUser        String?   // Usuario del PAC
  pacPass        String?   // Contrase√±a del PAC
  testMode       Boolean   @default(true) // Modo pruebas/producci√≥n
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  users          User[]
  invoices       Invoice[]
}

model Invoice {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  saleId      String   @db.Uuid
  sale        Sale     @relation(fields: [saleId], references: [id])
  customerId  String   @db.Uuid
  customer    Customer @relation(fields: [customerId], references: [id])
  companyId   String   @db.Uuid
  company     Company  @relation(fields: [companyId], references: [id])

  uuid        String?  // Folio fiscal SAT
  serie       String?
  folio       String?
  status      String   @default("pending") // pending, stamped, cancelled
  xmlUrl      String?
  pdfUrl      String?
  cancelledAt DateTime?
  paymentMethod   String?   // Forma de pago (PUE, PPD)
  paymentForm     String?   // M√©todo de pago (01, 04, etc.)
  currency        String?   @default("MXN")
  exchangeRate    Float?    // Tipo de cambio si no es MXN
  subtotal        Float?    // Base gravable
  discount        Float?    // Descuento
  taxes           Float?    // Total de impuestos
  cfdiUse         String?   // Uso del CFDI (G01, G02, etc.)
  relatedInvoices String?   // UUIDs de CFDI relacionados (pagos, etc.)
  cancellationStatus String? // Estado de cancelaci√≥n
  cancellationReceipt String? // Acuse de cancelaci√≥n
  paymentAccount  String?   // Cuenta de pago (√∫ltimos 4 d√≠gitos)
  verificationUrl String?   // URL para verificaci√≥n en SAT

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoiceItems InvoiceItem[]  // üëà detalle de productos facturados
}

model InvoiceItem {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoiceId   String   @db.Uuid
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  saleItemId  String   @db.Uuid   // Relaci√≥n con la l√≠nea de venta original
  saleItem    SaleItem @relation(fields: [saleItemId], references: [id])

  quantity    Float     // cantidad facturada (puede ser parcial)
  unitPrice   Float
  totalPrice  Float
}